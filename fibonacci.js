// Generated by CoffeeScript 1.6.2
/*
# Fibonacci.js
# Calculate Fibonacci numbers in JavaScript. Ultrafast.
#
# @version 1.2.1
# @author Lukas Bestle <http://lu-x.me>
# @link https://github.com/vis7mac/fibonaccijs
# @copyright Copyright 2013 Lukas Bestle
# @license http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0
# @file fibonacci.js
*/


(function() {
  var Big, arg, bigjs, count, current2, end, file, filename, fs, i, iStart, json, last1, last2, lastTime, output, start, time, value, _i, _j, _k, _len, _len1, _ref, _ref1;

  count = 1477;

  output = false;

  bigjs = false;

  filename = false;

  if (process.argv != null) {
    _ref = process.argv;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (arg === '-o') {
        output = true;
      } else if (arg === '-b' && (typeof process !== "undefined" && process !== null)) {
        bigjs = true;
      } else if (arg.match(/.*\.fibonacci/) && (typeof process !== "undefined" && process !== null)) {
        filename = arg;
      } else if (!isNaN(arg)) {
        count = arg;
      }
    }
  }

  if (count > 1477 & !bigjs) {
    console.log("The count you requested is to big. Please use Big.js with that (`-b`).");
    return;
  }

  if (filename) {
    bigjs = true;
    fs = require('fs');
    file = fs.readFileSync(fs.realpathSync(filename), {
      'encoding': 'utf-8'
    });
    json = JSON.parse(file);
    _ref1 = json.numbers.reverse();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      value = _ref1[_j];
      if (typeof last1 === "undefined" || last1 === null) {
        last1 = value;
      } else {
        last2 = value;
        break;
      }
      iStart = json.generated + 1;
      lastTime = json.time;
    }
  } else {
    last1 = 1;
    last2 = 0;
    iStart = 3;
    lastTime = 0;
  }

  if (bigjs) {
    Big = require('./big');
    last1 = new Big(last1);
    last2 = new Big(last2);
  }

  console.log("{\n	\"numbers\": [");

  if (output & lastTime === 0) {
    console.log("		\"" + last2 + "\",");
    console.log("		\"" + last1 + "\",");
  }

  start = new Date().getTime();

  if (iStart < count) {
    for (i = _k = iStart; iStart <= count ? _k <= count : _k >= count; i = iStart <= count ? ++_k : --_k) {
      current2 = last2;
      last2 = last1;
      if (bigjs) {
        last1 = current2.plus(last1);
      } else {
        last1 = current2 + last1;
      }
      if (output && i < count - 1) {
        console.log("		\"" + last1 + "\",");
      }
    }
  }

  end = new Date().getTime();

  time = end - start + lastTime;

  console.log("		\"" + last2 + "\",");

  console.log("		\"" + last1 + "\"");

  console.log("	],");

  console.log("	\"time\": " + time + ",\n	\"generated\": " + count + "\n}");

}).call(this);
